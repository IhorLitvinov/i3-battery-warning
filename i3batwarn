#!/usr/bin/env python3
import subprocess
import atexit
import os
import sys
import time
from signal import SIGTERM


class Daemon:
    """
    A generic daemon class.

    Usage: subclass the Daemon class and override the run() method
    """

    def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile

    def daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """
        try:
            pid = os.fork()
            if pid > 0:
                # exit first parent
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/")
        os.setsid()
        os.umask(0)

        # do second fork
        try:
            pid = os.fork()
            if pid > 0:
                # exit from second parent
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = open(self.stdin, 'r')
        so = open(self.stdout, 'a+')
        se = open(self.stderr, 'a+')
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

        # write pidfile
        atexit.register(self.delpid)
        pid = str(os.getpid())
        open(self.pidfile, 'w+').write("%s\n" % pid)

    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        """
        Start the daemon
        """
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = open(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        """
        Stop the daemon
        """
        # Get the pid from the pidfile
        try:
            pf = open(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return  # not an error in a restart

        # Try killing the daemon process
        try:
            while 1:
                os.kill(pid, SIGTERM)
                time.sleep(0.1)
        except OSError as err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print(str(err))
                sys.exit(1)

    def restart(self):
        """
        Restart the daemon
        """
        self.stop()
        self.start()

    def run(self):
        """
        You should override this method when you subclass Daemon. It will be called after the process has been
        daemonized by start() or restart().
        """


class MyDaemon(Daemon):
    # default error message
    message = "AWW SNAP! I am running out of juice ...  Please, charge me or I'll have to power down."

    # default energy limit in percent, where warning should be displayed
    limit = 17

    # config dir
    config_path = os.path.expanduser('~/.config/i3batwarn/config')

    def read_config(self):
        if not os.path.isfile(self.config_path):
            return
        try:
            config = open(self.config_path)
            for line in config:
                if line.startswith("message"):
                    (massage_param, value) = line.split("=", 1)
                    self.message = value.strip().replace('"', '\\"')
                if line.startswith("limit"):
                    (limit_param, value) = line.split("=", 1)
                    self.limit = int(value)
            config.close()
        except IOError:
            return

    def run(self):
        while True:
            self.read_config()

            power_supplies_path = "/sys/class/power_supply/"

            # get list of power supplies
            power_supplies = os.listdir(power_supplies_path)

            def is_bat(line):
                return "BAT" in line

            # find battery directory name
            battery_name = next(filter(is_bat, power_supplies))

            # set full path to battery directory
            battery_dir_path = power_supplies_path + battery_name

            # get status of battery
            with open(battery_dir_path + "/status") as status_file:
                battery_status = status_file.readline()

            # get remaining energy value
            with open(battery_dir_path + "/charge_now") as charge_now_file:
                charge_now = charge_now_file.readline()

            # get full energy value
            with open(battery_dir_path + "/charge_full_design") as charge_full_file:
                charge_full = charge_full_file.readline()

            percent = int(charge_now) * 100 / int(charge_full)

            # command
            command = '/usr/bin/i3-nagbar -m ' + '"%s"' % self.message

            # show warning if energy limit in percent is less then user set limit and
            # if battery is discharging
            if (percent <= self.limit) and ("Discharging" in battery_status):
                subprocess.call(command, shell=True)
            time.sleep(20)


if __name__ == "__main__":
    daemon = MyDaemon('/tmp/i3batwarn.pid')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
            print("Unknown command")
            sys.exit(2)
        sys.exit(0)
    else:
        print("usage: %s start|stop|restart" % sys.argv[0])
        sys.exit(2)
